// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.2.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8SUTW8TPRDHv0o0z3N0uimUS26UN+WCUKueqh7M7jR1lbWN7a0aRZbI9lKgElUlKJWQ",
	"uEA59Yo4lH6ZbVD5Fsh2tmmal4KI4JLsruflP/PzTAdikUrBkRsN9Q5IqmiKBpV/yzSqRuKeEtSxYtIw",
	"waEOxc5xsXNa5F+KndOLk3e93U+9k30gwNyhpGYDCHCaItTLEAQUPsuYwgTqRmVIQMcbmFIX27Sls2Tc",
	"YBMVWGvLUy9ixUXgMjNenxISlWHoj0KOywjaKMabQGC7Kqhk1Vgk2ERexW2jaNXQpnfaoi2WUOMcLjX5",
	"nAOFqyHyGikji6ebGBuwxKtZQi0F1zgqiCXjCiIThF5PypKyb6OZnS3j68JHYablzhYbleWMGazcfdIA",
	"AluodOAzP1ebq7m8QiKnkkEdbvtPxNPxUiNHxj810bfW1UEdYEccHqFZ8QZOYijXG9+q1dxfLLhB7v2o",
	"lC0We89oU7v8nStwmcHUO/6vcB3q8F80uHBRn3I01FR7WTtVirZD6ZPv3/nX5xfHn4v8oPf6be/ssOge",
	"Ft0z//vBhboT9A77N7hBxWmrsoxqC1XlgVJCeRw6S1Oq2jflOCryV0AgXKlVCJ1aswSk0GOaeU8hNeis",
	"+oOA2iyKpP1bnbypgWFGrt1kN2t2BOH8TBMPyE0nVXT3zr+9/767X3TfFPneEKaFcZgWaVJZCt2aGcoi",
	"PyhFTIBoSX82ok5YXjZkbaHBUbT3/fc+2qvbc3V84wYmUX812rU/HLHhFZSi1rT5C9umNBy/a6ZgzA96",
	"L17+OPp4fdQWagujfB4LU3koMp7MkmCZf+IYTltp/4zTrOboho33FzFM34bW2p8BAAD//8E8Dq5fCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
